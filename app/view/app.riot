app
  button(onclick='{ clear }') clear
  h2 create
  form(onsubmit='{ sub }')
    input(type='text' name='title' placeholder='todo')
    input(type='submit' value='create')
  h2 tasks
  ol(ref='reorder')
    li(each='{ item, index in list }' if='{ !item.deleted }').task
      input(type='checkbox' onchange='{ chk }' checked='{ item.checked }')
      span(class='{ strike: item.checked }').title
        | { item.title }
      reveal(text='details' alt='x' item='{ item }')
        | id: { opts.item['_']['#'] } | 
        virtual(if='{ opts.item.next }')
          | next: { opts.item.next }

      reveal(text='edit' alt='x' item='{ item }')
        form(onsubmit='{ parent.rename }').ib
          input(type='text' name='rename' value='{ opts.item.title }')
          input(type='submit' value='edit')
      button(onclick='{ parent.del }')
        | delete
  h2 deleted
  ul
    li(each='{ item, index  in archive }')
      span(class='{ strike: item.checked }')
        | { index }. { item.title }
      button(onclick='{ restore }')
        | restore

  script.
    let ui = this;
    let db = opts.db.get('list');
    ui.list = [];
    db.convert(ui.list);
    ui.archive = [];
    ui.clear = clear;
    ui.sub = sub;
    ui.chk = chk;
    ui.del = del;
    ui.rename = rename;
    ui.restore = restore;

    const Slip = require('slipjs');
    ui.on('mount', init);

    function key(item) {
      return Gun.node.soul(item);
    }

    function soul(item) {
      return item['_']['soul'];
    }

    function clear() {
      localStorage.clear();
      window.location.reload(false);
    }

    function init() {
      arc('deleted');
      let list = ui.refs.reorder;
      new Slip(list);
      list.addEventListener('slip:reorder', after);
    }

    function after(ev) {
      let details = {
        was: ev.detail.originalIndex,
        is: ev.detail.spliceIndex
      }
      if(details.was !== details.is) {
        up(details);
      }
    }

    function up(pos) {
      let li = ui.list;
      let l = li.length
      let ids = {
        current: key(li[pos.was])
      };
      if(pos.was) {
        // console.log('was not first item');
        ids.oldprev = key(li[pos.was - 1])
      }
      if(pos.was !== l - 1) {
        // console.log('was not final item');
        ids.oldnext = key(li[pos.is - 1]);
      }
      if(pos.is !== l - 1) {
        // console.log('is not final item');
        ids.newnext = key(li[pos.is])
      }
      if(pos.is) {
        // console.log('is not final item');
        ids.newprev = key(li[pos.is - 1]);
      }
      change(ids, pos);
    }

    function change(positions, from) {
      console.log('change', opts.db.get(from), opts.db.get(positions));
    }

    function arc(type) {
      ui.archive = ui.list.filter(by(type));
    }

    function by(type) {
      return function(obj) {
        if(obj[type] && obj[type] === true) {
          return obj;
        }
      }
    }

    function dissolve(obj) {
      let val = obj.value;
      obj.value = '';
      return val;
    }

    function sub(ev) {
      ev.preventDefault();
      let len = ui.list.length;
      let title = dissolve(ev.target.title);
      let current = db.set({ title });

      if(len) {
        let prev = key(ui.list[len - 1]);
        let next = soul(current);
        opts.db.get(prev).put({ next });
      }

      arc('deleted');
    }

    function chk(ev) {
      alter(ev.item.item, { checked: ev.target.checked });
    }

    function del(ev) {
      alter(ev.item.item, { deleted: true });
      arc('deleted');
    }

    function log(ev) {
      console.log(ev, new Date(), ui.list);
    }

    function rename(ev) {
      ev.preventDefault();
      alter(ev.item.item, { title: ev.target.rename.value });
      ui.update();
    }

    function restore(ev) {
      alter(ev.item.item, { deleted: false });
      arc('deleted');
    }

    function alter(item, obj) {
      let id = key(item);
      db.get(id).put(obj);
    }
